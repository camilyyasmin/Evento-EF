// <auto-generated />
using System;
using EventosEF.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventosEF.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventosEF.Models.Categoria", b =>
                {
                    b.Property<Guid>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriaId");

                    b.ToTable("tbCategorias", (string)null);
                });

            modelBuilder.Entity("EventosEF.Models.Evento", b =>
                {
                    b.Property<Guid>("EventoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LocalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrganizadorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventoId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("LocalId");

                    b.HasIndex("OrganizadorId");

                    b.ToTable("tbEventos", (string)null);
                });

            modelBuilder.Entity("EventosEF.Models.Inscricao", b =>
                {
                    b.Property<int>("InscricaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InscricaoId"));

                    b.Property<DateTime>("DataInscricao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParticipanteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InscricaoId");

                    b.HasIndex("EventoId");

                    b.HasIndex("ParticipanteId");

                    b.ToTable("tbInscricaos", (string)null);
                });

            modelBuilder.Entity("EventosEF.Models.Local", b =>
                {
                    b.Property<Guid>("LocalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacidade")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocalId");

                    b.ToTable("tbLocais", (string)null);
                });

            modelBuilder.Entity("EventosEF.Models.Organizador", b =>
                {
                    b.Property<Guid>("OrganizadorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizadorId");

                    b.ToTable("tbOrganizadores", (string)null);
                });

            modelBuilder.Entity("EventosEF.Models.Participante", b =>
                {
                    b.Property<Guid>("ParticipanteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParticipanteId");

                    b.ToTable("tbParticipantes", (string)null);
                });

            modelBuilder.Entity("EventosEF.Models.Evento", b =>
                {
                    b.HasOne("EventosEF.Models.Categoria", "Categoria")
                        .WithMany("Eventos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventosEF.Models.Local", "Local")
                        .WithMany("Eventos")
                        .HasForeignKey("LocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventosEF.Models.Organizador", "Organizador")
                        .WithMany("Eventos")
                        .HasForeignKey("OrganizadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Local");

                    b.Navigation("Organizador");
                });

            modelBuilder.Entity("EventosEF.Models.Inscricao", b =>
                {
                    b.HasOne("EventosEF.Models.Evento", "Evento")
                        .WithMany("Inscricaos")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventosEF.Models.Participante", "Participantes")
                        .WithMany("Inscricaos")
                        .HasForeignKey("ParticipanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Participantes");
                });

            modelBuilder.Entity("EventosEF.Models.Categoria", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("EventosEF.Models.Evento", b =>
                {
                    b.Navigation("Inscricaos");
                });

            modelBuilder.Entity("EventosEF.Models.Local", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("EventosEF.Models.Organizador", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("EventosEF.Models.Participante", b =>
                {
                    b.Navigation("Inscricaos");
                });
#pragma warning restore 612, 618
        }
    }
}
